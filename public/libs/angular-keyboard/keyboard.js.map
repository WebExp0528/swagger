{"version":3,"sources":["keyboard.js","keyboard.module.js","undefined.js","directives/KbContainerController.js","directives/KbItemController.js","directives/kbAutofocus.js","directives/kbFocus.js","directives/kbItem.js","directives/kbList.js","directives/kbSelect.js","services/kbFocus.js","services/kbScroll.js"],"names":[],"mappings":"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","file":"keyboard.js","sourcesContent":["'use strict';\n\n/**\n * angular-keyboard\n *\n * Keyboard behavior for AngularJS Webapps\n *\n *\n * Inspired by: Apple Mail\n * Implementation inspirated by: WinJS ListView http://try.buildwinjs.com/pages/listview/options/default.html\n */\nangular.module('keyboard.focus', []);\nangular.module('keyboard', ['keyboard.focus']);\n\n/**\n * Register 'undefined' with the `undefined` value.\n */\nangular.module('keyboard').constant('undefined');\n\nangular.module('keyboard').factory('KbContainerController', function (undefined, $log) {\n    /**\n     * @class KbListController\n     * @param {jQElement} $element\n     */\n    function KbContainerController($element) {\n        this.identifier = '[kb-container]';\n        this.ngModel = undefined;\n        this.selected = []; // Selected kbItem(s)\n        this.multiple = false;\n        this.cyclic = false;\n        this.active = undefined; // kbItemController of the active kb-item.\n        this._element = $element[0];\n    }\n    KbContainerController.$inject = ['$element'];\n    angular.extend(KbContainerController.prototype, {\n        /** @lends kbListController */\n\n        /**\n         *\n         * @param {Object} options\n         */\n        initialize: function initialize(options) {\n            this.multiple = angular.isDefined(options.attrs.multiple);\n            this.cyclic = angular.isDefined(options.attrs.kbCyclic);\n            angular.extend(this, options);\n            if (this.ngModel) {\n                this.ngModel.$render = function () {\n                    // Change the selection to model.\n                    if (this.multiple) {\n                        this.selected = this.ngModel.$viewValue;\n                        if (angular.isArray(this.selected) === false) {\n                            if (angular.isDefined(this.selected)) {\n                                $log.error(this.identifier, 'ng-model(multiple) must be an array, got:', this.selected);\n                            }\n                            this.selected = [];\n                        }\n                    } else {\n                        this.selected[0] = this.ngModel.$viewValue;\n                    }\n                    // Activate the first item in the selection.\n                    for (var i in this.selected) {\n                        var kbItem = this._locate(this.selected[i]);\n                        if (kbItem) {\n                            this.active = kbItem;\n                            break;\n                        }\n                    }\n                }.bind(this);\n            }\n        },\n\n        /**\n         * Select the given model.\n         * Or in multiselect mode, add the given model to the selection.\n         *\n         * @param {*} model\n         */\n        select: function select(model) {\n            if (!this.ngModel) {\n                return; // A kb-item can't be selected without a ng-model on the container element.\n            }\n            if (this.multiple) {\n                if (this.isSelected(model) === false) {\n                    this.selected.push(model);\n                    this.ngModel.$setViewValue(this.selected);\n                }\n            } else {\n                this.selected[0] = model;\n                this.ngModel.$setViewValue(model);\n            }\n        },\n        /**\n         * Deselect the given model.\n         * Does nothing if the given model isn't selected.\n         *\n         * @param {*} model\n         */\n        deselect: function deselect(model) {\n            if (!this.ngModel) {\n                return;\n            }\n            var index = this.selected.indexOf(model);\n            if (index !== -1) {\n                this.selected.splice(index, 1);\n                if (this.multiple) {\n                    this.ngModel.$setViewValue(this.selected);\n                } else {\n                    this.ngModel.$setViewValue(undefined);\n                }\n            }\n        },\n        /**\n         * Select or deselect the given model.\n         * Or in multiselect mode, adds or removes the given model to the selection.\n         *\n         * @param {*} model\n         */\n        toggle: function toggle(model) {\n            if (this.isSelected(model)) {\n                this.deselect(model);\n            } else {\n                this.select(model);\n            }\n        },\n        /**\n         * Check if the given model is selected.\n         *\n         * @param {*} model\n         * @returns {Boolean}\n         */\n        isSelected: function isSelected(model) {\n            return this.selected.indexOf(model) !== -1;\n        },\n\n        /**\n         * Activate the previous item.\n         *\n         * @returns {Boolean}\n         */\n        previous: function previous() {\n            var prev = this._getSiblingItems(this.active).previous;\n            if (prev) {\n                this.active = prev;\n                return true;\n            }\n            return false;\n        },\n\n        /**\n         * Activate the next item.\n         *\n         * @returns {Boolean}\n         */\n        next: function next() {\n            var next = this._getSiblingItems(this.active).next;\n            if (next) {\n                this.active = next;\n                return true;\n            }\n            return false;\n        },\n\n        /**\n         * Abstract method for when an item is clicked, moved to with the keys.\n         * @param {KbItemController} kbItem\n         * @param {Object} options\n         * @returns {Boolean}\n         */\n        activate: function activate(kbItem, options) {\n            $log.$error(this.identifier, 'activate() is not implemented');\n            return false;\n        },\n\n        /**\n         * Abstract method when an item is clicked or when space or enter is pressed.\n         * @param {KbItemController} kbItem  The active item.\n         * @returns {Boolean}\n         */\n        invoke: function invoke(kbItem) {\n            $log.$error(this.identifier, 'invoke() is not implemented');\n            return false;\n        },\n\n        /**\n         * Returns the (first) kbItemController  which has the given model value.\n         * @returns {KbItemController}\n         */\n        _locate: function _locate(model) {\n            var items = this._element.querySelectorAll('[kb-item]');\n            for (var i = 0; i < items.length; i++) {\n                var kbItem = angular.element(items.item(i)).controller('kbItem');\n                if (kbItem.model === model) {\n                    return kbItem;\n                }\n            }\n        },\n        /**\n         * Returns the element, controller and models from the current, prevous and next item.\n         *\n         * @param {KbItemController} kbItem\n         * @returns {Object} with up to 2 KbItemControllers: previous and next.\n         */\n        _getSiblingItems: function _getSiblingItems(kbItem) {\n            var element = kbItem.element[0];\n            var items = this._element.querySelectorAll('[kb-item]');\n            for (var i = 0; i < items.length; i++) {\n                var el = items.item(i);\n                if (el === element) {\n                    var siblings = {};\n                    if (i !== 0) {\n                        siblings.previous = angular.element(items.item(i - 1)).controller('kbItem');\n                    }\n                    if (i < items.length - 1) {\n                        siblings.next = angular.element(items.item(i + 1)).controller('kbItem');\n                    }\n                    return siblings;\n                }\n            }\n            return {};\n        },\n        /**\n         * Returns the first item.\n         * @returns {kbItemController}\n         */\n        _first: function _first() {\n            var el = this._element.querySelector('[kb-item]');\n            if (el) {\n                return angular.element(el).controller('kbItem');\n            }\n        },\n        /**\n         * Returns the first item.\n         * @returns {kbItemController}\n         */\n        _last: function _last() {\n            var nodes = this._element.querySelectorAll('[kb-item]');\n            if (nodes.length) {\n                return angular.element(nodes[nodes.length - 1]).controller('kbItem');\n            }\n        }\n    });\n    return KbContainerController;\n});\nangular.module('keyboard').factory('KbItemController', function (kbScroll, undefined) {\n\n    /**\n     * @class KbItemController\n     * @param {jQElement} $element\n     */\n    function KbItemController($element) {\n        this.model = undefined;\n        this.element = $element;\n    };\n    KbItemController.$inject = ['$element'];\n    return KbItemController;\n});\n\n/**\n * Set the autofocus based on an expression.\n *\n * Similar to ng-disabled: https://docs.angularjs.org/api/ng/directive/ngDisabled\n *\n * Usage:\n * <input type=\"email\" kb-autofocus=\"email == ''\" />\n */\nangular.module('keyboard.focus').directive('kbFocus', function (kbFocus, $log) {\n    'use strict';\n\n    return function ($scope, el, attrs) {\n        $scope.$watch(attrs.kbAutofocus, function (value) {\n            el.prop('autofocus', !!value);\n        });\n    };\n});\n/**\n * Control focus based on label with the kbFocus service.\n *\n * Inspired by ng-focus-on\n * @link https://github.com/goodeggs/ng-focus-on\n *\n * Usage:\n * <input type=\"text\" kb-focus=\"label\" />\n */\nangular.module('keyboard.focus').directive('kbFocus', function (kbFocus, $log) {\n    return function ($scope, el, attrs) {\n        $scope.$watch(kbFocus.get, function (label) {\n            if (label === attrs.kbFocus) {\n                if (label === '') {\n                    $log.error('[kb-focus] Invalid label in', el[0]);\n                } else {\n                    el[0].focus();\n                    if (document.activeElement !== el[0]) {\n                        // focus() failed?\n                        setTimeout(function () {\n                            // maybe the element was hidden (display:none)\n                            el[0].focus(); // try one more time.\n                        });\n                    }\n                }\n            }\n        });\n        el.on('focus', function () {\n            kbFocus(attrs.kbFocus);\n            if (!$scope.$root.$$phase) {\n                $scope.$apply();\n            }\n        });\n        el.on('blur', function () {\n            if (kbFocus.get() === attrs.kbFocus) {\n                kbFocus.reset();\n                if (!$scope.$root.$$phase) {\n                    $scope.$apply();\n                }\n            }\n        });\n    };\n});\n/**\n * kb-item\n */\nangular.module('keyboard').directive('kbItem', function (KbItemController, $animate, $log) {\n    return {\n        controller: KbItemController,\n        require: ['kbItem', '?^kbList', '?^kbSelect'],\n        link: function link($scope, el, attrs, controllers) {\n            var kbItem = controllers[0];\n            var kbContainer = controllers[1];\n            var isTabbable = el[0].tagName === 'A' || el[0].tagName === 'BUTTON' || el[0].tagName === 'AREA';\n\n            for (var i = 1; i < controllers.length; i++) {\n                if (controllers[i]) {\n                    kbContainer = controllers[i];\n                }\n            }\n            if (!kbContainer) {\n                $log.error(\"Controller 'kbList' or 'kbSelect', required by directive 'kbItem', can't be found!\");\n                return;\n            }\n\n            var selectedClass = attrs.kbSelectedClass || 'kb-selected';\n            var activeClass = attrs.kbActiveClass || 'kb-active';\n\n            // Bind the model\n            kbItem.model = $scope.$eval(attrs.kbItem);\n            $scope.$watch(attrs.kbItem, function (model) {\n                kbItem.model = model;\n            });\n\n            if (typeof kbContainer.active === 'undefined') {\n                kbContainer.active = kbItem;\n            } else if (kbContainer.isSelected(kbItem.model) && kbContainer.isSelected(kbContainer.active.model) === false) {\n                kbContainer.active = kbItem;\n            }\n            $scope.$watch(function () {\n                return kbContainer.isSelected(kbItem.model);\n            }, function (isSelected) {\n                if (isSelected) {\n                    $animate.addClass(el, selectedClass);\n                } else {\n                    $animate.removeClass(el, selectedClass);\n                }\n            });\n            $scope.$watch(function () {\n                return kbContainer.active === kbItem;\n            }, function (isActive) {\n                if (isActive) {\n                    el.attr('tabindex', 0);\n                    $animate.addClass(el, activeClass);\n                } else {\n                    $animate.removeClass(el, activeClass);\n                    if (isTabbable) {\n                        el.attr('tabindex', -1);\n                    } else {\n                        el.removeAttr('tabindex');\n                    }\n                }\n            });\n\n            /**\n             * Calculates the distance to the ClientRect in a given direction.\n             * Allows for keyboard navigation based on the relative visual location of the element.\n             *\n             * @param {string} direction 'up', 'left', 'right' or 'down',\n             * @param {ClientRect} currentRect The position of the current item.\n             * @return {Number}\n             */\n            function distance(direction, currentRect, targetRect) {\n                if (direction === 'left' && targetRect.left < currentRect.left) {\n                    return currentRect.left - targetRect.left;\n                }\n                if (direction === 'up' && targetRect.top < currentRect.top) {\n                    return currentRect.top - targetRect.top;\n                }\n                if (direction === 'right' && targetRect.left > currentRect.left) {\n                    return targetRect.left - currentRect.left;\n                }\n                if (direction === 'down' && targetRect.top > currentRect.top) {\n                    return targetRect.top - currentRect.top;\n                }\n                return 0;\n            }\n            // { e.which: direction }\n            var directions = {\n                37: 'left',\n                38: 'up',\n                39: 'right',\n                40: 'down'\n            };\n            el.on('keydown', function (e) {\n                var changed = false;\n                var invoke = false;\n                if (e.which >= 37 && e.which <= 40) {\n                    // An arrow-key?\n                    var siblings = kbContainer._getSiblingItems(kbItem);\n                    var currentRect = el[0].getBoundingClientRect();\n                    if (siblings.previous && distance(directions[e.which], currentRect, siblings.previous.element[0].getBoundingClientRect())) {\n                        kbContainer.activate(siblings.previous);\n                        changed = true;\n                    }\n                    if (siblings.next && distance(directions[e.which], currentRect, siblings.next.element[0].getBoundingClientRect())) {\n                        kbContainer.activate(siblings.next);\n                        changed = true;\n                    }\n                    if (changed === false && (!siblings.next || !siblings.previous)) {\n                        // Detect if we reached the end/begin.\n                        var key = e.which;\n                        var trigger = false;\n                        if (e.which <= 38) {\n                            key += 2;\n                        } else {\n                            key -= 2;\n                        }\n                        // Check distance in the oppositie direction\n                        if (siblings.next && distance(directions[key], currentRect, siblings.next.element[0].getBoundingClientRect())) {\n                            if (kbContainer.cyclic) {\n                                kbContainer.activate(kbContainer._last());\n                                changed = true;\n                            } else {\n                                trigger = 'kbReachedBegin';\n                            }\n                        }\n                        if (siblings.previous && distance(directions[key], currentRect, siblings.previous.element[0].getBoundingClientRect())) {\n                            if (kbContainer.cyclic) {\n                                kbContainer.activate(kbContainer._first());\n                                changed = true;\n                            } else {\n                                trigger = 'kbReachedEnd';\n                            }\n                        }\n                        if (trigger && kbContainer.attrs[trigger]) {\n                            // Trigger kb-reached-end and kb-reached-begin events\n                            angular.element(kbContainer._element).scope().$eval(kbContainer.attrs[trigger], { $event: e });\n                        }\n                    }\n                    if (changed) {\n                        e.preventDefault(); // prevent viewport movement\n                    }\n                } else if (e.which === 32) {\n                        // Space\n                        e.preventDefault(); // prevent viewport movement\n                        invoke = true;\n                    } else if (e.which === 13) {\n                        // Enter\n                        invoke = true;\n                    }\n                if (changed || invoke) {\n                    if (invoke) {\n                        kbContainer.invoke(kbItem);\n                        if (attrs.kbInvoke) {\n                            $scope.$eval(attrs.kbInvoke, { $event: e });\n                        }\n                    }\n                    $scope.$apply();\n                }\n            });\n            el.on('click', function (e) {\n                kbContainer.activate(kbItem);\n                kbContainer.invoke(kbItem);\n                if (attrs.kbInvoke) {\n                    $scope.$eval(attrs.kbInvoke, { $event: e });\n                }\n                $scope.$apply();\n            });\n            $scope.$on('$destroy', function () {\n                kbContainer.active = kbContainer._first();\n            });\n        }\n    };\n});\n\n/**\n * kb-list directive\n *\n * Usage:\n * <div kb-list ng-model=\"selection\"> ... <div kb-item=\"aItem\">...</div> ... </div>\n */\nangular.module('keyboard').directive('kbList', function (KbContainerController, kbScroll) {\n    return {\n        controller: KbContainerController,\n        require: ['kbList', '?ngModel'],\n        link: function link($scope, el, attrs, controllers) {\n            var kbContainer = controllers[0];\n            kbContainer.initialize({\n                identifier: '[kb-list]',\n                ngModel: controllers[1],\n                attrs: attrs,\n                activate: function activate(kbItem) {\n                    this.active = kbItem;\n                    this.select(kbItem.model);\n                    kbScroll.focus(kbItem.element[0]);\n                },\n                invoke: function invoke() {\n                    return false;\n                }\n            });\n        }\n    };\n});\n/**\n * kb-select directive\n *\n * Usage:\n * <div kb-select ng-model=\"selection\"> ... <div kb-item=\"aItem\">...</div> ... </div>\n */\nangular.module('keyboard').directive('kbSelect', function (KbContainerController, kbScroll) {\n    return {\n        controller: KbContainerController,\n        require: ['kbSelect', 'ngModel'],\n        link: function link($scope, el, attrs, controllers) {\n            var kbContainer = controllers[0];\n\n            kbContainer.initialize({\n                identifier: '[kb-select]',\n                ngModel: controllers[1],\n                attrs: attrs,\n                activate: function activate(kbItem) {\n                    this.active = kbItem;\n                    kbScroll.focus(kbItem.element[0]);\n                },\n                invoke: function invoke(kbItem) {\n                    this.toggle(kbItem.model);\n                    return true;\n                }\n            });\n        }\n    };\n});\n/**\n * Service for setting the focus on elements with the kb-focus directive.\n *\n * Inspired by ng-focus-on\n * @link https://github.com/goodeggs/ng-focus-on\n *\n * Usage:\n * kbFocus('email'); // set focus\n * kbFocus(); // get current focus\n */\nangular.module('keyboard.focus').factory('kbFocus', function ($log) {\n    var _label = ''; // Current focussed label\n\n    /**\n     * Getter and setter for the focus.\n     *\n     * @param {String} label\n     * @returns {String}\n     */\n    var kbFocus = function kbFocus(label) {\n        if (arguments.length === 0) {\n            return _label;\n        }\n        kbFocus.set(label);\n    };\n    kbFocus.get = function () {\n        return _label;\n    };\n    kbFocus.set = function (label) {\n        if (typeof label === 'string') {\n            _label = label;\n        } else {\n            $log.error('[kbFocus] label must be a string, got', label);\n        }\n    };\n    kbFocus.reset = function () {\n        _label = '';\n    };\n    return kbFocus;\n});\n\n/**\n * Helper for scrolling an element into the viewable area.\n *\n * Usage:\n * kbScroll.to(el, offset, duration)\n */\nangular.module('keyboard').service('kbScroll', function ($window) {\n\n    // Most browsers scroll via scrollTop on the <body> element.\n    var viewportNode = 'BODY';\n    if (navigator.userAgent.toLowerCase().indexOf('firefox') > -1) {\n        viewportNode = 'HTML'; // Except Firefox, which uses scrollTop on <html> element.\n    }\n\n    var kbScroll = this;\n\n    /**\n     * Change the scrollposition animated and return a function that cancels the animation.\n     *\n     * @param {Element} container\n     * @param {String} property 'scrollTop' or 'scrollLeft'\n     * @param {Number} value\n     * @param {Number} duration\n     * @returns {Function}\n     */\n    this.change = function (container, property, value, duration) {\n        if (duration && angular.element.prototype.animate) {\n            // jQuery.animate is available?\n            var el = angular.element(container);\n            var props = {};\n            props[property] = value;\n            el.animate(props, duration);\n            return function () {\n                el.stop(true, true);\n            };\n        } else {\n            container[property] = value;\n            return angular.noop;\n        }\n    };\n\n    /**\n     * Get the scrollcontainer of the given element\n     * @param {Element} el\n     * @returns {Element}\n     */\n    this.getScrollParent = function (el) {\n        var parent = el.parentElement;\n        while (parent.nodeName !== viewportNode) {\n            var parentStyle = getComputedStyle(parent);\n            var overflowStyle = parentStyle.overflow + parentStyle.overflowX + parentStyle.overflowY;\n            if (overflowStyle.match(/scroll|hidden/)) {\n                break;\n            }\n            parent = parent.parentElement;\n        }\n        return parent;\n    };\n\n    /**\n     *\n     * @param {Element} el  The DOMElement\n     * @param {Object} offset  Allowed hidden\n     * @param {Number} duration  Duration of the animation in ms\n     * @returns {Function} cancel animation\n     */\n    this.to = function (el, offset, duration) {\n        var cancelAnimation = angular.noop;\n        var parent = kbScroll.getScrollParent(el);\n        var elRect = el.getBoundingClientRect();\n        var pos = {\n            top: Math.ceil(elRect.top),\n            right: Math.ceil(elRect.right),\n            bottom: Math.ceil(elRect.bottom),\n            left: Math.ceil(elRect.left)\n        };\n        // @todo Add outline-width to pos\n        if (parent.nodeName === viewportNode) {\n            var parentPos = {\n                top: 0,\n                right: $window.innerWidth,\n                bottom: $window.innerHeight,\n                left: 0\n            };\n        } else {\n            var parentRect = parent.getBoundingClientRect();\n            var parentPos = {\n                top: Math.ceil(parentRect.top),\n                right: Math.ceil(parentRect.right),\n                bottom: Math.ceil(parentRect.bottom),\n                left: Math.ceil(parentRect.left)\n            };\n        }\n        //        console.info(el.nodeName, pos, 'in', parent.nodeName, parentPos, 'offset', offset);\n\n        var relTop = pos.top - parentPos.top;\n        var relRight = parentPos.right - pos.right;\n        var relBottom = parentPos.bottom - pos.bottom;\n        var relLeft = pos.left - parentPos.left;\n\n        if (relTop + offset.top < 0) {\n            // up\n            cancelAnimation = kbScroll.change(parent, 'scrollTop', parent.scrollTop + relTop + offset.top, duration);\n            relBottom += relTop;\n            relTop = 0;\n        } else if (relBottom + offset.bottom < 0) {\n            // down\n            cancelAnimation = kbScroll.change(parent, 'scrollTop', parent.scrollTop - relBottom + offset.bottom, duration);\n            relTop += relBottom;\n            relBottom = 0;\n        }\n        if (relLeft + offset.left < 0) {\n            // left\n            cancelAnimation = kbScroll.change(parent, 'scrollLeft', parent.scrollLeft + relLeft + offset.left, duration);\n            relRight += relLeft;\n            relLeft = 0;\n        } else if (relRight + offset.right < 0) {\n            // right\n            cancelAnimation = kbScroll.change(parent, 'scrollLeft', parent.scrollLeft - relRight + offset.right, duration);\n            relLeft += relRight;\n            relRight = 0;\n        }\n        if (parent.nodeName === viewportNode) {\n            return cancelAnimation;\n        }\n        var cancelParentAnimation = kbScroll.to(parent, { top: relTop, right: relTop, bottom: relBottom, left: relLeft }, duration);\n        return function () {\n            cancelAnimation();\n            cancelParentAnimation();\n        };\n    };\n\n    var cancelFocus = angular.noop;\n    /**\n     * Focus an element\n     * @param {Element} el\n     */\n    this.focus = function (el) {\n        cancelFocus();\n        var parentEl = this.getScrollParent(el);\n        var scrollOffset = {\n            top: parentEl.scrollTop,\n            left: parentEl.scrollLeft\n        };\n        if (!el.hasAttribute('tabindex')) {\n            el.setAttribute('tabindex', 0);\n        };\n        el.focus();\n        if (parentEl.scrollTop !== scrollOffset.top || parentEl.scrollLeft !== scrollOffset.left) {\n            // position changed?\n            parentEl.scrollTop = scrollOffset.top;\n            parentEl.scrollLeft = scrollOffset.left;\n            cancelFocus = this.to(el, { top: 0, right: 0, bottom: 0, left: 0 }, 200);\n        }\n    };\n});","/**\n * angular-keyboard\n *\n * Keyboard behavior for AngularJS Webapps\n *\n *\n * Inspired by: Apple Mail\n * Implementation inspirated by: WinJS ListView http://try.buildwinjs.com/pages/listview/options/default.html\n */\nangular.module('keyboard.focus', []);\nangular.module('keyboard', ['keyboard.focus']);\n","/**\n * Register 'undefined' with the `undefined` value.\n */\nangular.module('keyboard').constant('undefined');\n","angular.module('keyboard').factory('KbContainerController', function (undefined, $log) {\n    /**\n     * @class KbListController\n     * @param {jQElement} $element\n     */\n    function KbContainerController($element) {\n        this.identifier = '[kb-container]';\n        this.ngModel = undefined;\n        this.selected = []; // Selected kbItem(s)\n        this.multiple = false;\n        this.cyclic = false;\n        this.active = undefined; // kbItemController of the active kb-item.\n        this._element = $element[0];\n    }\n    KbContainerController.$inject = ['$element'];\n    angular.extend(KbContainerController.prototype, {\n        /** @lends kbListController */\n\n        /**\n         *\n         * @param {Object} options\n         */\n        initialize: function (options) {\n            this.multiple = angular.isDefined(options.attrs.multiple);\n            this.cyclic = angular.isDefined(options.attrs.kbCyclic);\n            angular.extend(this, options);\n            if (this.ngModel) {\n                this.ngModel.$render = function () {\n                    // Change the selection to model.\n                    if (this.multiple) {\n                        this.selected = this.ngModel.$viewValue;\n                        if (angular.isArray(this.selected) === false) {\n                            if (angular.isDefined(this.selected)) {\n                                $log.error(this.identifier, 'ng-model(multiple) must be an array, got:', this.selected);\n                            }\n                            this.selected = [];\n                        }\n                    } else {\n                        this.selected[0] = this.ngModel.$viewValue;\n                    }\n                    // Activate the first item in the selection.\n                    for (var i in this.selected) {\n                        var kbItem = this._locate(this.selected[i]);\n                        if (kbItem) {\n                            this.active = kbItem;\n                            break;\n                        }\n                    }\n                }.bind(this);\n            }\n        },\n\n        /**\n         * Select the given model.\n         * Or in multiselect mode, add the given model to the selection.\n         *\n         * @param {*} model\n         */\n        select: function (model) {\n            if (!this.ngModel) {\n                return; // A kb-item can't be selected without a ng-model on the container element.\n            }\n            if (this.multiple) {\n                if (this.isSelected(model) === false) {\n                    this.selected.push(model);\n                    this.ngModel.$setViewValue(this.selected);\n                }\n            } else {\n                this.selected[0] = model;\n                this.ngModel.$setViewValue(model);\n            }\n        },\n        /**\n         * Deselect the given model.\n         * Does nothing if the given model isn't selected.\n         *\n         * @param {*} model\n         */\n        deselect: function (model) {\n            if (!this.ngModel) {\n                return;\n            }\n            var index = this.selected.indexOf(model);\n            if (index !== -1) {\n                this.selected.splice(index, 1);\n                if (this.multiple) {\n                    this.ngModel.$setViewValue(this.selected);\n                } else {\n                    this.ngModel.$setViewValue(undefined);\n                }\n            }\n\n        },\n        /**\n         * Select or deselect the given model.\n         * Or in multiselect mode, adds or removes the given model to the selection.\n         *\n         * @param {*} model\n         */\n        toggle: function (model) {\n            if (this.isSelected(model)) {\n                this.deselect(model);\n            } else {\n                this.select(model);\n            }\n        },\n        /**\n         * Check if the given model is selected.\n         *\n         * @param {*} model\n         * @returns {Boolean}\n         */\n        isSelected: function (model) {\n            return (this.selected.indexOf(model) !== -1);\n        },\n\n        /**\n         * Activate the previous item.\n         *\n         * @returns {Boolean}\n         */\n        previous: function () {\n            var prev = this._getSiblingItems(this.active).previous;\n            if (prev) {\n                this.active = prev;\n                return true;\n            }\n            return false;\n        },\n\n        /**\n         * Activate the next item.\n         *\n         * @returns {Boolean}\n         */\n        next: function () {\n            var next = this._getSiblingItems(this.active).next;\n            if (next) {\n                this.active = next;\n                return true;\n            }\n            return false;\n        },\n\n        /**\n         * Abstract method for when an item is clicked, moved to with the keys.\n         * @param {KbItemController} kbItem\n         * @param {Object} options\n         * @returns {Boolean}\n         */\n        activate: function (kbItem, options) {\n            $log.$error(this.identifier, 'activate() is not implemented');\n            return false;\n        },\n\n        /**\n         * Abstract method when an item is clicked or when space or enter is pressed.\n         * @param {KbItemController} kbItem  The active item.\n         * @returns {Boolean}\n         */\n        invoke: function (kbItem) {\n            $log.$error(this.identifier, 'invoke() is not implemented');\n            return false;\n        },\n\n        /**\n         * Returns the (first) kbItemController  which has the given model value.\n         * @returns {KbItemController}\n         */\n        _locate: function (model) {\n            var items = this._element.querySelectorAll('[kb-item]');\n            for (var i = 0; i < items.length; i++) {\n                var kbItem = angular.element(items.item(i)).controller('kbItem');\n                if (kbItem.model === model) {\n                    return kbItem;\n                }\n            }\n        },\n        /**\n         * Returns the element, controller and models from the current, prevous and next item.\n         *\n         * @param {KbItemController} kbItem\n         * @returns {Object} with up to 2 KbItemControllers: previous and next.\n         */\n        _getSiblingItems: function (kbItem) {\n            var element = kbItem.element[0];\n            var items = this._element.querySelectorAll('[kb-item]');\n            for (var i = 0; i < items.length; i++) {\n                var el = items.item(i);\n                if (el === element) {\n                    var siblings = {};\n                    if (i !== 0) {\n                        siblings.previous = angular.element(items.item(i - 1)).controller('kbItem');\n                    }\n                    if (i < items.length - 1) {\n                        siblings.next = angular.element(items.item(i + 1)).controller('kbItem');\n                    }\n                    return siblings;\n                }\n            }\n            return {};\n        },\n        /**\n         * Returns the first item.\n         * @returns {kbItemController}\n         */\n        _first: function () {\n            var el = this._element.querySelector('[kb-item]');\n            if (el) {\n                return angular.element(el).controller('kbItem');\n            }\n        },\n        /**\n         * Returns the first item.\n         * @returns {kbItemController}\n         */\n        _last: function () {\n            var nodes = this._element.querySelectorAll('[kb-item]');\n            if (nodes.length) {\n                return angular.element(nodes[nodes.length - 1]).controller('kbItem');\n            }\n        }\n    });\n    return KbContainerController;\n});","angular.module('keyboard').factory('KbItemController', function (kbScroll, undefined) {\n\n    /**\n     * @class KbItemController\n     * @param {jQElement} $element\n     */\n    function KbItemController($element) {\n        this.model = undefined;\n    \tthis.element = $element;\n    };\n    KbItemController.$inject = ['$element'];\n    return KbItemController;\n});\n","/**\n * Set the autofocus based on an expression.\n *\n * Similar to ng-disabled: https://docs.angularjs.org/api/ng/directive/ngDisabled\n *\n * Usage:\n * <input type=\"email\" kb-autofocus=\"email == ''\" />\n */\nangular.module('keyboard.focus').directive('kbFocus', function (kbFocus, $log) {\n    'use strict';\n    return function ($scope, el, attrs) {\n        $scope.$watch(attrs.kbAutofocus, function (value) {\n            el.prop('autofocus', !!value);\n        });\n    };\n});","/**\n * Control focus based on label with the kbFocus service.\n *\n * Inspired by ng-focus-on\n * @link https://github.com/goodeggs/ng-focus-on\n *\n * Usage:\n * <input type=\"text\" kb-focus=\"label\" />\n */\nangular.module('keyboard.focus').directive('kbFocus', function (kbFocus, $log) {\n    return function ($scope, el, attrs) {\n        $scope.$watch(kbFocus.get, function (label) {\n            if (label === attrs.kbFocus) {\n                if (label === '') {\n                    $log.error('[kb-focus] Invalid label in', el[0]);\n                } else {\n                    el[0].focus();\n                    if (document.activeElement !== el[0]) { // focus() failed?\n                        setTimeout(function () { // maybe the element was hidden (display:none)\n                            el[0].focus(); // try one more time.\n                        });\n                    }\n                }\n            }\n        });\n        el.on('focus', function () {\n            kbFocus(attrs.kbFocus);\n            if (!$scope.$root.$$phase) {\n                $scope.$apply();\n            }\n        });\n        el.on('blur', function () {\n            if (kbFocus.get() === attrs.kbFocus) {\n                kbFocus.reset();\n                if (!$scope.$root.$$phase) {\n                    $scope.$apply();\n                }\n            }\n        });\n    };\n});","/**\n * kb-item\n */\nangular.module('keyboard').directive('kbItem', function (KbItemController, $animate, $log) {\n    return {\n        controller: KbItemController,\n        require: ['kbItem', '?^kbList', '?^kbSelect'],\n        link: function ($scope, el, attrs, controllers) {\n            var kbItem = controllers[0];\n            var kbContainer = controllers[1];\n            var isTabbable = (el[0].tagName === 'A' || el[0].tagName === 'BUTTON' || el[0].tagName === 'AREA');\n\n            for (var i = 1; i < controllers.length; i++) {\n                if (controllers[i]) {\n                    kbContainer = controllers[i];\n                }\n            }\n            if (!kbContainer) {\n                $log.error(\"Controller 'kbList' or 'kbSelect', required by directive 'kbItem', can't be found!\");\n                return;\n            }\n\n            var selectedClass = attrs.kbSelectedClass || 'kb-selected';\n            var activeClass = attrs.kbActiveClass || 'kb-active';\n\n            // Bind the model\n            kbItem.model = $scope.$eval(attrs.kbItem);\n            $scope.$watch(attrs.kbItem, function (model) {\n                kbItem.model = model;\n            });\n\n            if (typeof kbContainer.active === 'undefined') {\n                kbContainer.active = kbItem;\n            } else if (kbContainer.isSelected(kbItem.model) && kbContainer.isSelected(kbContainer.active.model) === false) {\n                kbContainer.active = kbItem;\n            }\n            $scope.$watch(function () {\n                return kbContainer.isSelected(kbItem.model);\n            }, function (isSelected) {\n                if (isSelected) {\n                    $animate.addClass(el, selectedClass);\n                } else {\n                    $animate.removeClass(el, selectedClass);\n                }\n            });\n            $scope.$watch(function () {\n                return kbContainer.active === kbItem;\n            }, function (isActive) {\n                if (isActive) {\n                    el.attr('tabindex', 0);\n                    $animate.addClass(el, activeClass);\n                } else {\n                    $animate.removeClass(el, activeClass);\n                    if (isTabbable) {\n                        el.attr('tabindex', -1);\n                    } else {\n                        el.removeAttr('tabindex');\n                    }\n                }\n            });\n\n            /**\n             * Calculates the distance to the ClientRect in a given direction.\n             * Allows for keyboard navigation based on the relative visual location of the element.\n             *\n             * @param {string} direction 'up', 'left', 'right' or 'down',\n             * @param {ClientRect} currentRect The position of the current item.\n             * @return {Number}\n             */\n            function distance(direction, currentRect, targetRect) {\n                if (direction === 'left' && targetRect.left < currentRect.left) {\n                    return currentRect.left - targetRect.left;\n                }\n                if (direction === 'up' && targetRect.top < currentRect.top) {\n                    return currentRect.top - targetRect.top;\n                }\n                if (direction === 'right' && targetRect.left > currentRect.left) {\n                    return targetRect.left - currentRect.left;\n                }\n                if (direction === 'down' && targetRect.top > currentRect.top) {\n                    return targetRect.top - currentRect.top;\n                }\n                return 0;\n            }\n            // { e.which: direction }\n            var directions = {\n                37: 'left',\n                38: 'up',\n                39: 'right',\n                40: 'down'\n            };\n            el.on('keydown', function (e) {\n                var changed = false;\n                var invoke = false;\n                if (e.which >= 37 && e.which <= 40) { // An arrow-key?\n                    var siblings = kbContainer._getSiblingItems(kbItem);\n                    var currentRect = el[0].getBoundingClientRect();\n                    if (siblings.previous && distance(directions[e.which], currentRect, siblings.previous.element[0].getBoundingClientRect())) {\n                        kbContainer.activate(siblings.previous);\n                        changed = true;\n                    }\n                    if (siblings.next && distance(directions[e.which], currentRect, siblings.next.element[0].getBoundingClientRect())) {\n                        kbContainer.activate(siblings.next);\n                        changed = true;\n                    }\n                    if (changed === false && (!siblings.next || !siblings.previous)) {\n                        // Detect if we reached the end/begin.\n                        var key = e.which;\n                        var trigger = false;\n                        if (e.which <= 38) {\n                            key += 2;\n                        } else {\n                            key -= 2;\n                        }\n                        // Check distance in the oppositie direction\n                        if (siblings.next && distance(directions[key], currentRect, siblings.next.element[0].getBoundingClientRect())) {\n                            if (kbContainer.cyclic) {\n                                kbContainer.activate(kbContainer._last());\n                                changed = true;\n                            } else {\n                                trigger = 'kbReachedBegin';\n                            }\n                        }\n                        if (siblings.previous && distance(directions[key], currentRect, siblings.previous.element[0].getBoundingClientRect())) {\n                            if (kbContainer.cyclic) {\n                                kbContainer.activate(kbContainer._first());\n                                changed = true;\n                            } else {\n                                trigger = 'kbReachedEnd';\n                            }\n                        }\n                        if (trigger && kbContainer.attrs[trigger]) { // Trigger kb-reached-end and kb-reached-begin events\n                            angular.element(kbContainer._element).scope().$eval(kbContainer.attrs[trigger], { $event: e});\n                        }\n                    }\n                    if (changed) {\n                        e.preventDefault(); // prevent viewport movement\n                    }\n                } else if (e.which === 32) { // Space\n                    e.preventDefault(); // prevent viewport movement\n                    invoke = true;\n                } else if (e.which === 13) { // Enter\n                    invoke = true;\n                }\n                if (changed || invoke) {\n                    if (invoke) {\n                        kbContainer.invoke(kbItem);\n                        if (attrs.kbInvoke) {\n                            $scope.$eval(attrs.kbInvoke, {$event: e});\n                        }\n                    }\n                    $scope.$apply();\n                }\n            });\n            el.on('click', function (e) {\n                kbContainer.activate(kbItem);\n                kbContainer.invoke(kbItem);\n                if (attrs.kbInvoke) {\n                    $scope.$eval(attrs.kbInvoke, {$event: e});\n                }\n                $scope.$apply();\n            });\n            $scope.$on('$destroy', function () {\n               kbContainer.active = kbContainer._first();\n            });\n        }\n    };\n});\n","/**\n * kb-list directive\n *\n * Usage:\n * <div kb-list ng-model=\"selection\"> ... <div kb-item=\"aItem\">...</div> ... </div>\n */\nangular.module('keyboard').directive('kbList', function (KbContainerController, kbScroll) {\n    return {\n        controller: KbContainerController,\n        require: ['kbList', '?ngModel'],\n        link: function ($scope, el, attrs, controllers) {\n            var kbContainer = controllers[0];\n            kbContainer.initialize({\n                identifier: '[kb-list]',\n                ngModel: controllers[1],\n                attrs: attrs,\n                activate: function (kbItem) {\n                    this.active = kbItem;\n                    this.select(kbItem.model);\n                    kbScroll.focus(kbItem.element[0]);\n                },\n                invoke: function () {\n                    return false;\n                }\n            });\n        }\n    };\n});","/**\n * kb-select directive\n *\n * Usage:\n * <div kb-select ng-model=\"selection\"> ... <div kb-item=\"aItem\">...</div> ... </div>\n */\nangular.module('keyboard').directive('kbSelect', function (KbContainerController, kbScroll) {\n    return {\n        controller: KbContainerController,\n        require: ['kbSelect', 'ngModel'],\n        link: function ($scope, el, attrs, controllers) {\n            var kbContainer = controllers[0];\n\n            kbContainer.initialize({\n                identifier: '[kb-select]',\n                ngModel: controllers[1],\n                attrs: attrs,\n                activate: function (kbItem) {\n                    this.active = kbItem;\n                    kbScroll.focus(kbItem.element[0]);\n                },\n                invoke: function (kbItem) {\n                    this.toggle(kbItem.model);\n                    return true;\n                }\n            });\n        }\n    };\n});","/**\n * Service for setting the focus on elements with the kb-focus directive.\n *\n * Inspired by ng-focus-on\n * @link https://github.com/goodeggs/ng-focus-on\n *\n * Usage:\n * kbFocus('email'); // set focus\n * kbFocus(); // get current focus\n */\nangular.module('keyboard.focus').factory('kbFocus', function ($log) {\n    var _label = ''; // Current focussed label\n\n    /**\n     * Getter and setter for the focus.\n     *\n     * @param {String} label\n     * @returns {String}\n     */\n    var kbFocus = function (label) {\n        if (arguments.length === 0) {\n            return _label;\n        }\n        kbFocus.set(label);\n    };\n    kbFocus.get = function () {\n        return _label;\n    };\n    kbFocus.set = function (label) {\n        if (typeof label === 'string') {\n            _label = label;\n        } else {\n            $log.error('[kbFocus] label must be a string, got', label);\n        }\n    };\n    kbFocus.reset = function () {\n        _label = '';\n    };\n    return kbFocus;\n});\n\n","/**\n * Helper for scrolling an element into the viewable area.\n *\n * Usage:\n * kbScroll.to(el, offset, duration)\n */\nangular.module('keyboard').service('kbScroll', function ($window) {\n\n    // Most browsers scroll via scrollTop on the <body> element.\n    var viewportNode = 'BODY';\n    if (navigator.userAgent.toLowerCase().indexOf('firefox') > -1) {\n        viewportNode = 'HTML'; // Except Firefox, which uses scrollTop on <html> element.\n    }\n\n    var kbScroll = this;\n\n    /**\n     * Change the scrollposition animated and return a function that cancels the animation.\n     *\n     * @param {Element} container\n     * @param {String} property 'scrollTop' or 'scrollLeft'\n     * @param {Number} value\n     * @param {Number} duration\n     * @returns {Function}\n     */\n    this.change = function (container, property, value, duration) {\n        if (duration && angular.element.prototype.animate) { // jQuery.animate is available?\n            var el = angular.element(container);\n            var props = {};\n            props[property] = value;\n            el.animate(props, duration);\n            return function () {\n                el.stop(true, true);\n            };\n        } else {\n            container[property] = value;\n            return angular.noop;\n        }\n    };\n\n    /**\n     * Get the scrollcontainer of the given element\n     * @param {Element} el\n     * @returns {Element}\n     */\n    this.getScrollParent = function (el) {\n        var parent = el.parentElement;\n        while (parent.nodeName !== viewportNode) {\n            var parentStyle = getComputedStyle(parent);\n            var overflowStyle = parentStyle.overflow + parentStyle.overflowX + parentStyle.overflowY;\n            if (overflowStyle.match(/scroll|hidden/)) {\n                break;\n            }\n            parent = parent.parentElement;\n        }\n        return parent;\n    };\n\n    /**\n     *\n     * @param {Element} el  The DOMElement\n     * @param {Object} offset  Allowed hidden\n     * @param {Number} duration  Duration of the animation in ms\n     * @returns {Function} cancel animation\n     */\n    this.to = function (el, offset, duration) {\n        var cancelAnimation = angular.noop;\n        var parent = kbScroll.getScrollParent(el);\n        var elRect = el.getBoundingClientRect();\n        var pos = {\n            top: Math.ceil(elRect.top),\n            right: Math.ceil(elRect.right),\n            bottom: Math.ceil(elRect.bottom),\n            left: Math.ceil(elRect.left)\n        };\n        // @todo Add outline-width to pos\n        if (parent.nodeName === viewportNode) {\n            var parentPos = {\n                top: 0,\n                right: $window.innerWidth,\n                bottom: $window.innerHeight,\n                left: 0\n            };\n        } else {\n            var parentRect = parent.getBoundingClientRect();\n            var parentPos = {\n                top: Math.ceil(parentRect.top),\n                right: Math.ceil(parentRect.right),\n                bottom: Math.ceil(parentRect.bottom),\n                left: Math.ceil(parentRect.left)\n            };\n        }\n//        console.info(el.nodeName, pos, 'in', parent.nodeName, parentPos, 'offset', offset);\n\n        var relTop = pos.top - parentPos.top;\n        var relRight = parentPos.right - pos.right;\n        var relBottom = parentPos.bottom - pos.bottom;\n        var relLeft = pos.left - parentPos.left;\n\n        if (relTop + offset.top < 0) { // up\n            cancelAnimation = kbScroll.change(parent, 'scrollTop', parent.scrollTop + relTop + offset.top, duration);\n            relBottom += relTop;\n            relTop = 0;\n        } else if (relBottom + offset.bottom < 0) { // down\n            cancelAnimation = kbScroll.change(parent, 'scrollTop', parent.scrollTop - relBottom + offset.bottom, duration);\n            relTop += relBottom;\n            relBottom = 0;\n        }\n        if (relLeft + offset.left < 0) { // left\n            cancelAnimation = kbScroll.change(parent, 'scrollLeft', parent.scrollLeft + relLeft + offset.left, duration);\n            relRight += relLeft;\n            relLeft = 0;\n        } else if (relRight + offset.right < 0) { // right\n            cancelAnimation = kbScroll.change(parent, 'scrollLeft', parent.scrollLeft - relRight + offset.right, duration);\n            relLeft += relRight;\n            relRight = 0;\n        }\n        if (parent.nodeName === viewportNode) {\n            return cancelAnimation;\n        }\n        var cancelParentAnimation = kbScroll.to(parent, {top: relTop, right: relTop, bottom: relBottom, left: relLeft}, duration);\n        return function () {\n            cancelAnimation();\n            cancelParentAnimation();\n        };\n    };\n\n    var cancelFocus = angular.noop;\n    /**\n     * Focus an element\n     * @param {Element} el\n     */\n    this.focus = function (el) {\n        cancelFocus();\n        var parentEl = this.getScrollParent(el);\n        var scrollOffset = {\n            top: parentEl.scrollTop,\n            left: parentEl.scrollLeft\n        };\n        if (!el.hasAttribute('tabindex')) {\n            el.setAttribute('tabindex', 0);\n        };\n        el.focus();\n        if (parentEl.scrollTop !== scrollOffset.top || parentEl.scrollLeft !== scrollOffset.left) { // position changed?\n            parentEl.scrollTop = scrollOffset.top;\n            parentEl.scrollLeft = scrollOffset.left;\n            cancelFocus = this.to(el, {top: 0, right:0, bottom:0, left: 0}, 200);\n        }\n    };\n});\n"],"sourceRoot":"/source/"}